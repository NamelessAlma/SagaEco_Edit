
using System;
using System.Collections.Generic;
using System.Text;
using SagaLib;
using SagaDB.Actor;
using SagaDB.Item;
using SagaMap.Scripting;
using SagaScript.Chinese.Enums;
namespace SagaScript.M30210000
{
    public class S950000043 : Event
    {
        public S950000043()
        {
            this.EventID = 950000043;
        }

        public override void OnEvent(ActorPC pc)
        {
            if(pc.AStr["骑宠盒子每日限制"] == DateTime.Now.ToString("yyyy-MM-dd") && pc.Account.GMLevel < 20)
            {
                Say(pc, 0, "今天无法再打开这个盒子了哦");
                return;
            }
            if (CountItem(pc, 950000043) >= 1)
            {
                PlaySound(pc, 2070, false, 100, 50);
                TakeItem(pc, 950000043, 1);
                pc.AStr["骑宠盒子每日限制"] = DateTime.Now.ToString("yyyy-MM-dd");
                奖励(pc);
            }
        }
        void 奖励(ActorPC pc)
        {
            List<uint> list = getlist();
            if (SagaLib.Global.Random.Next(0, 10) > 5)
                list = getlistB();
            GiveItem(pc, list[SagaLib.Global.Random.Next(0, list.Count - 1)], 1);
        }
        List<uint> getlistB()
        {
            List<uint> idsB = new List<uint>() {10052302,10052303,10052201,10052202,10052203,10052204,10052205,10052206,10052207,10063050,10063051,10063052,10063053,10063054,10063055,10063056,10063057,10061000,10171900,10058400,10058401,10058402,10058403,10058404,10131800,10159300,10059400,10059450,10059451};
            return idsB;
        }
        List<uint> getlist()
        {
            List<uint> idsC = new List<uint>() { 10058000, 10058002, 10058050, 10058400, 10058401, 10058402, 10058403, 10058404, 10131800, 10159300, 10058700, 10058701, 10137400, 10059400, 10059450, 10059451, 10059300, 10059350, 10059351, 10059352, 10060900, 10061200, 10061000, 10171900, 10064000, 10063050, 10063051, 10063052, 10063053, 10063054, 10063055, 10063056, 10063057, 10063060, 10063061, 10063062, 10064300, 10064301, 10064302, 10064303, 10160500, 10160501, 10160502, 10160503, 10160504, 10160000, 10160001, 10160002, 10159900, 10167000, 10164300, 10078000, 10172400, 10172500, 10074760, 10080400, 10080300, 10165600, 10065500, 10084000, 10052201, 10052202, 10052203, 10052204, 10052205, 10052206, 10052207, 10174300, 10052302, 10052303, 10089400, 10090900, 10090901, 10090902, 10090950, 10087900, 10088900, 10174200, 10119600, 10120200, 10120201, 10125100, 10091600, 10132600, 10130200, 10130201, 10133800, 10133600, 10138400, 10140903, 10140901, 10141300, 10172100, 10140601, 10148500, 10136600, 10136600, 10149000, 10156700, 10156701, 10152300, 10167400, 10149200, 10154300, 10152700, 10153700, 10154500, 10156000, 10136800, 10173400 };
            return idsC;
        }
    }
}

